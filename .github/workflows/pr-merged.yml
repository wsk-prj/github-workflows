# PR 병합 이후 스크립트
# log-context: 디버깅용
# close-related-issues: 본문에 포함된 관련 이슈 닫기
# delete-merged-branch: 병합이 완료된 브랜치 삭제

name: Pull request merged actions

on:
  pull_request:
    types: [closed]

jobs:
  # 테스트: context 출력
  log-context:
    runs-on: ubuntu-latest

    steps:
      - name: Console log context
        uses: actions/github-script@v7
        with:
          script: console.log(JSON.stringify(context, null, 2));

  # 관련된 이슈 닫기(close, fix, resolve)
  close-related-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Close related issues in PR body
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const regex = new RegExp(
              [
                '\\b(?:',                     // 단어 경계
                'close|closes|closed',
                '|fix|fixes|fixed',
                '|resolve|resolves|resolved',
                ')\\b',                       // 단어 경계
                '\\s+#(\\d+)'                 // 공백 후 #이슈번호
              ].join(''),
              'gi'                            // 대소문자 무시, 전역
            );

            const issueNumbers = [...prBody.matchAll(regex)].map(match => match[1]);

            if (issueNumbers.length === 0) {
              console.log('No linked issues found in PR body.');
              return;
            }

            // 해당되는 모든 이슈 닫기
            for (const number of issueNumbers) {
              console.log(`Closing issue #${number}`);
              await github.rest.issues.update({
                ...context.repo,
                issue_number: number,
                state: 'closed'
              });
            }

  # 병합이 완료된 브랜치 삭제
  delete-merged-branch:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Delete merged branch
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const targetBranch = context.payload.pull_request.head.ref;

            // 보호된 브랜치는 무시 (예: main, develop)
            if (['main', 'develop'].includes(targetBranch)) {
              console.log(`Branch ${targetBranch} is protected. Skipping delete.`);
              return;
            }

            // 브랜치 제거
            await github.rest.git.deleteRef({
              owner,
              repo,
              ref: `heads/${targetBranch}`
            });

            console.log(`Deleted merged branch: ${targetBranch}`);
