name: Pull request approved actions

on:
  pull_request_review:
    types: [submitted]

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    env:
      APPROVAL_THRESHOLD_PROD: ${{ vars.APPROVAL_THRESHOLD_PROD || '1' }} # github variables 설정 필요, 기본값 1
      APPROVAL_THRESHOLD_DEV: ${{ vars.APPROVAL_THRESHOLD_DEV || '1' }}

    steps:
      - name: Auto merge on approval threshold
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // PR 리뷰 목록 조회
            const reviews = await github.paginate(
              github.rest.pulls.listReviews,
              { owner, repo, pull_number: prNumber }
            );

            // 승인 리뷰 수 계산 (최신 리뷰만 고려)
            const latestReviewState = new Map();
            for (const review of reviews.reverse()) {
              const user = review.user.login;
              if (!latestReviewState.has(user)) {
                latestReviewState.set(user, review.state);
              }
            }

            // 리뷰어 목록 추출
            const approvers = [...latestReviewState.entries()]
              .filter(([_, state]) => state === 'APPROVED')
              .map(([user]) => user);

            const approvalCount = approvers.length;
            const requiredCount = parseInt(process.env.APPROVAL_THRESHOLD);

            if (approvalCount < requiredCount) {
              console.log('❌ Not enough approvals. Skipping.');
              return;
            }

            console.log(`✅ Approvals: ${approvalCount}/${requiredCount}`);

            // 브랜치 병합 가능 상태 확인
            const { data: prInfo } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });

            if (prInfo.mergeable_state !== 'clean') {
              console.log(`❌ PR is not in a clean mergeable state: ${prInfo.mergeable_state}`);
              return;
            }

            // 관련 이슈 목록 추출
            const issueMatches = pr.body?.match(/(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi) || [];
            const issueNumbers = issueMatches.map(match => match.match(/#(\d+)/)?.[1]).filter(Boolean);
            const issueRefs = issueNumbers.map(num => `#${num}`);

            // 커밋 목록 조회
            const commits = await github.paginate(
              github.rest.pulls.listCommits,
              { owner, repo, pull_number: prNumber }
            );

            // co-author 목록 추출
            const coAuthors = new Set();
            for (const commit of commits) {
              const name = commit.commit.author?.name;
              const email = commit.commit.author?.email;

              if (name && email) {
                coAuthors.add(`Co-authored-by: ${name} <${email}>`);
              }

              const matches = commit.commit.message.match(/Co-authored-by:\s+.+<.+>/gi);
              if (matches) {
                for (const match of matches) {
                  coAuthors.add(match.trim());
                }
              }
            }

            // 커밋 메시지 작성
            const commitTitle = `${pr.title} (#${pr.number})`;
            const commitBody = [
              `Auto-merged with ${approvalCount} approvals - ${approvers.join(', ')}`,
              issueRefs.length ? `Related to - ${issueRefs.join(', ')}` : '',
              '---',
              ...coAuthors
            ].join('\n').trim();

            // Squash Merge
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: prNumber,
              merge_method: 'squash',
              commit_title: commitTitle,
              commit_message: commitBody
            });

            console.log(`✅ Squash merged PR #${prNumber}`);
