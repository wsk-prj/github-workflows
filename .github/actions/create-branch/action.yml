name: Create branch from issue

inputs:
  branch-prefix:
    description: 'Branch prefix (e.g., issue, feat, fix)'
    required: true
    default: 'issue'
  github-token:
    description: 'GitHub token'
    required: true

outputs:
  branch-name:
    description: 'Created branch name'
    value: ${{ steps.create-branch.outputs.branch-name }}

runs:
  using: composite
  steps:
    - name: Create branch from develop
      id: create-branch
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        script: |
          const issueNumber = context.payload.issue.number;
          const issueAuthor = context.payload.issue.user.login;
          const baseBranch = 'develop';
          const prefix = '${{ inputs.branch-prefix }}';
          const targetBranch = `${prefix}/${issueNumber}`;
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          // develop 브랜치에서 커밋 SHA 가져오기
          console.log(`🔍 Getting commit SHA for ${baseBranch} branch`);
          const base = await github.rest.repos.getBranch({
            owner,
            repo,
            branch: baseBranch,
          });
          const baseSha = base.data.commit.sha;

          // 브랜치 생성
          console.log(`📝 Creating branch ${targetBranch}`);
          try {
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${targetBranch}`,
              sha: baseSha,
            });
          } catch (err) {
            if (err.status === 422) {
              console.log('⚠️ Branch already exists. Skipping.');
            } else {
              throw err;
            }
          }

          // develop 커밋의 트리 SHA 가져오기
          console.log(`🔍 Getting tree SHA for ${baseBranch} branch`);
          const baseCommit = await github.rest.git.getCommit({
            owner,
            repo,
            commit_sha: baseSha,
          });
          const treeSha = baseCommit.data.tree.sha;

          // 빈 커밋 생성
          console.log(`📝 Creating empty commit for ${targetBranch}`);
          const emptyCommit = await github.rest.git.createCommit({
            owner,
            repo,
            message: `Created branch for issue #${issueNumber}\n\n[skip ci]`,
            tree: treeSha,
            parents: [baseSha],
          });

          // 브랜치 업데이트
          console.log(`🔄 Updating branch ${targetBranch}`);
          await github.rest.git.updateRef({
            owner,
            repo,
            ref: `heads/${targetBranch}`,
            sha: emptyCommit.data.sha,
            force: false,
          });

          // 봇 코멘트 작성
          console.log(`💬 Adding bot comment to issue #${issueNumber}`);
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: issueNumber,
            body: `Created branch ${targetBranch} for this issue and assigned to @${issueAuthor}`
          });

          console.log(`✅ Created branch ${targetBranch}`);
          
          // 생성된 브랜치명 출력
          core.setOutput('branch-name', targetBranch);
